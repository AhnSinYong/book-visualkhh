*** 실행은 첨부된 배치파일(*.bat 파일) 을 더블클릭하면 된다. 클라이언트의 경우 3가지 타입의 UI 로 실행할 수 있다. (아쿠아, 시스템, 메탈) 원하는 배치파일로 실행시키면 된다. ***

서버와 클라이언트 모두 자신의 ip(localhost 가 아닌 실제 ip) 로 연결하게 된다. 만약 방화벽 안의 로컬 네트워크나 기타 내부 네트워크에 연결되었다면 해당 네트워크의 ip 주소로 연결하게 될 것이다.


그럼 서버의 런타임 동적 로딩을 이용해서 동적으로 기능 확장하는 것에 대해 설명하겠다.

우선 서버와 클라이언트 모두를 실행 시킨다.

그리고 서버의 kr.or.javacafe.command 패키지에서 MessageCommand 클래스와 WowCommand 클래스를 다른 곳으로 이동시킨다.

클라이언트로 메세지를 쳐보면 아무런 응답도 없을것이다.

이제 서버에 MessageCommand 클래스를 원래 있던 곳으로 다시 옮겨놓고 클라이언트로 메세지를 입력한 후 엔터 혹은 send 버튼을 눌러보자.

그럼 메세지가 전달될 것이다.

마찬가지로 메세지를 입력하고 wow 버튼을 클릭하면 역시 응답이 없을 것이다.

바로 위와 마찬가지로 이제 다시 WowCommand 클래스를 원래 위치로 다시 옮겨놓고 메세지를 입력한 후에 wow 버튼을 클릭하면 서버에서 해당 메세지를 전달해줄 것이다.

따라서 여러분들은 서버의 기능 추가시 AbstractCommand 클래스를 상속하는 새로운 Command 클래스를 만들어서 서버의 kr.or.javacafe.command 패키지에 추가하면 서버를 재시작 하지 않고도 동적으로 기능확장을 할 수 있다.


********************   주의  *************************
xml 을 사용하기 때문에 클라이언트로 메세지를 보낼때 입력창에 & 나 < 를 입력하면 서버에서 파싱 에러가 발생한다. 이유는 올바르지 않은 xml 구문이 되기 때문이다.
필자가 시간 관계상 & 나 < 를 다른 문자로 변경해서 보내는것 까지는 구현하지 못하였다.
이것은 독자들의 몫으로 남겨두겠다.



///////////////////////////////   주의사항    ////////////////////////////////////
이 소스는 자유롭게 배포할 수 있지만 반드시 저자의 프로필을 같이 배포할 것.
또한 본 소스는 기사의 예제 소스로서 본 소스로 인한 어떠한 피해에도 필자는 책임을 지지 않음.